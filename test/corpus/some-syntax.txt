===========
Some syntax
===========

-- Lovely

-- use expressions
use foo/bar/baz
use lorem/ipsum#(dolor as amet, consectetur)

-- variable declaration
foo :: 4 -- constant
bar : Int = 4 -- mutable

-- functions
calc :: fun (~x: Int, ~y: Int) -> Int: {
  z :: x / y
  z^2
}

calc(foo, bar)

add :: fun (~num: Int, to other_num: Int): num + other_num

add(3, to: 4)

returns_unit :: fun (): {}

---

(source_file
  (comment)
  (comment)
  (expression
    (use_expression
      (variable_ident)
      (variable_ident)
      (variable_ident)))
  (expression
    (use_expression
      (variable_ident)
      (variable_ident)
      (use_expression_tail_item
        (variable_ident)
        (variable_ident))
      (use_expression_tail_item
        (variable_ident))))
  (comment)
  (expression
    (variable_declaration
      (variable_ident)
      (expression
        (int_literal))))
  (comment)
  (expression
    (variable_declaration
      (variable_ident)
      (type
        (type_ident))
      (expression
        (int_literal))))
  (comment)
  (comment)
  (expression
    (variable_declaration
      (variable_ident)
      (expression
        (function_expression
          (function_parameter
            (variable_ident)
            (type
              (type_ident)))
          (function_parameter
            (variable_ident)
            (type
              (type_ident)))
          (type
            (type_ident))
          (expression
            (block_expression
              (expression
                (variable_declaration
                  (variable_ident)
                  (expression
                    (infix_expression
                      (expression
                        (variable_ident))
                      (expression
                        (variable_ident))))))
              (expression
                (infix_expression
                  (expression
                    (variable_ident))
                  (expression
                    (int_literal))))))))))
  (expression
    (function_call
      (variable_ident)
      (expression
        (variable_ident))
      (expression
        (variable_ident))))
  (expression
    (variable_declaration
      (variable_ident)
      (expression
        (function_expression
          (function_parameter
            (variable_ident)
            (type
              (type_ident)))
          (function_parameter
            (variable_ident)
            (variable_ident)
            (type
              (type_ident)))
          (expression
            (infix_expression
              (expression
                (variable_ident))
              (expression
                (variable_ident))))))))
  (expression
    (function_call
      (variable_ident)
      (expression
        (int_literal))
      (variable_ident)
      (expression
        (int_literal))))
  (expression
    (variable_declaration
      (variable_ident)
      (expression
        (function_expression
          (expression
            (block_expression)))))))
